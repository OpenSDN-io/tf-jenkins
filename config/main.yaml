---

# These files contain defitions of jobs for each project from review system and for infra projects

# project object
# it may have own full definition of jobs or inclusion of templates with overrides
#
# project keys:
#   name - the name of project from review system
#   names - list of projects (to support forks or migration)
#   branch - string or list of branches to apply the definition
#   check/gate/nightly/post-merge...: name of predefined pipeline. Check/gate is used for check/gate events.
#                                     post-merge is used to run updates on affected projects
#                                     nightly and other are used to manually run infra jobs

# pipeline contains:
#   templates - array to specify templates for this pipeline. Each element can be string or
#               dictionary. Only 'branch' is supported key of dictionary.
#               It should contain string or list of branches to apply.
#   jobs - dictionary with overrides for included templates at stream level
#   streams - dictionary with overrides for included templates at job level

# template object may contain any set of jobs but best practice is to use it to one stream.
#
# template keys:
#   name - name of template to refer in pipeline
#   parents - list of template that must be used with this templates. this explicitely defines
#             dependent template to be able to refer in defined jobs to external jobs.
#   jobs - dictionary with jobs for this template
#   streams - dictionary with definitions for streams in this template

# stream is a virtual object to group set of jobs that has common workers/logs/reports/vars
# by default jobs in one stream inherit variables produced by dependent job.
# to be able to use variable of job from different template you have to use 'inherit-keys' property.
#
# stream keys:
#   frequency - how frequently (in days) this stream should be run. if current date is multiple to the value
#               then jobs will be run. Zero day is first Monday of current year.
#               default: 1
#   lock - name of jenkins lockable resource. if set then infra will obtain this lock for whole stream
#   vars - map of a key:value elements to use them as env vars in the job
#   voting - boolean value to indicate if this stream should be included into overall vote result or not

# job is a smallest unit of work. it refers to specific job of Jenkins
#
# job keys:
#   job-name - name of real job in jjb(jenkins) to execute. to be able to have several
#              jobs with different parameters we have to to define job with unique name
#              and define real job name as a parameter.
#   stream - identifier to group several jobs as one. it influences to logs colelcting,
#            cleanup jobs (as a stream post hook), inheritance of env vars
#   lock - name of jenkins lockable resource. if set then infra will obtain this lock for the job
#   vars - map of a key:value elements to use them as env vars in the job
#   depends-on - list of jobs that should be finished successfully to run this job.
#                may have inherit-keys list of keys of env vars that can be inherited
#                from non-self stream. by default inheritance of env vars is prohibited
#                for different streams.
#   type - comma separated types of the job. possible values: post-hook, no-report
#          post-hook is used for cleanup job. it informs infra code to wait for all deps
#          no-report means that this job shouldn't be included into user's report
#   timeout - timeout in minutes. 180 by default
#   job-params - map of a key:value elements to use them as parameters in the job

# some type of deployments use special hardware. Please refer to JUMPHOST definition in templates/jobs

# TODO: implement 'default' project with cleanup job

# TODO: implement templates for projects with pipelines/templates to reduce copy-paste in each project

- include:
    - templates.yaml
    - templates-ansible.yaml
    - templates-build.yaml
    - templates-build-juniper.yaml
    - templates-helm.yaml
    - templates-juju.yaml
    - templates-k8s-manifests.yaml
    - templates-operator.yaml
    - templates-rhosp.yaml
    - templates-rhosp-operator.yaml
    - templates-tests.yaml
    - templates-openshift4.yaml
    - nightly.yaml
    - staging.yaml
    - projects.yaml
