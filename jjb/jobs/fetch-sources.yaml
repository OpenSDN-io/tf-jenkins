- job:
    name: "fetch-sources"
    description: "fetch sources"
    defaults: global
    properties:
      - build-discarder:
          num-to-keep: 100
    scm:
      - tf-jenkins
      - tf-dev-env
    parameters:
      - label:
          name: NODE_NAME
      - string:
          name: STREAM 
      - string:
          name: JOB_RND
      - string:
          name: PIPELINE_NAME
      - string:
          name: PIPELINE_NUMBER
    wrappers:
      - workspace-cleanup:
          disable-deferred-wipeout: true
      - timestamps
      - credentials-binding:
          - ssh-user-private-key:
              credential-id: worker
              key-file-variable: WORKER_SSH_KEY
              username-variable: WORKER_USER_NAME
              passphrase-variable: WORKER_PASSPHRASE
      - credentials-binding:
          - amazon-web-services:
              credential-id: aws-creds
              access-key: AWS_ACCESS_KEY_ID
              secret-key: AWS_SECRET_ACCESS_KEY
      - credentials-binding:
          - text:
              credential-id: VEXX_OS_USERNAME
              variable: OS_USERNAME
          - text:
              credential-id: VEXX_OS_PROJECT_NAME
              variable: OS_PROJECT_NAME
          - text:
              credential-id: VEXX_OS_PASSWORD
              variable: OS_PASSWORD
          - text:
              credential-id: VEXX_OS_DOMAIN_NAME
              variable: OS_USER_DOMAIN_NAME
          - text:
              credential-id: VEXX_OS_DOMAIN_NAME
              variable: OS_PROJECT_DOMAIN_NAME
          - text:
              credential-id: VEXX_OS_AUTH_URL
              variable: OS_AUTH_URL
          - text:
              credential-id: RHEL_USER
              variable: RHEL_USER
          - text:
              credential-id: RHEL_PASSWORD
              variable: RHEL_PASSWORD
          - text:
              credential-id: RHEL_POOL_ID
              variable: RHEL_POOL_ID
      - credentials-binding:
          - ssh-user-private-key:
              credential-id: logs_host
              key-file-variable: LOGS_HOST_SSH_KEY
              username-variable: LOGS_HOST_USERNAME
    builders:
      - copyartifact:
          project: ${PIPELINE_NAME}
          filter: "global.env,*.$JOB_RND.env,patchsets-info.json"
          which-build: upstream-build
          optional: true
      - shell: |
          set +e
          set -o pipefail
          source "$WORKSPACE/global.env"
          ./src/progmaticlab/tf-jenkins/infra/gerrit/apply_patchsets.sh ./src tungstenfabric/tf-dev-env ./patchsets-info.json
      - shell: |
          source "$WORKSPACE/global.env"
          desc="Pipeline: ${PIPELINE_NAME}-${PIPELINE_NUMBER}  Random: ${JOB_RND}<br>Job logs: <a href=\"${LOGS_URL}/${STREAM}\">${LOGS_URL}/${STREAM}</a>"
          echo "DESCRIPTION $desc"
      - description-setter:
          regexp: "DESCRIPTION (.*)"
      - shell: |
          set +e
          set -o pipefail
          source "$WORKSPACE/global.env"
          source "${WORKSPACE}/deps.${JOB_NAME}.${JOB_RND}.env" || /bin/true
          # do it as a latest source to override all exports
          source "${WORKSPACE}/vars.${JOB_NAME}.${JOB_RND}.env" || /bin/true
          export FULL_LOGS_PATH="${LOGS_PATH}/${STREAM}"

          # definitions ONLY for this job
          export TF_DEVENV_CONTAINER_NAME="tf-developer-sandbox-${BUILD_ID}"
          # special case for fetch-sources - if we have changes in tf-dev-env then we should rebuild it
          if grep -q "tungstenfabric/tf-dev-env" ./patchsets-info.json ; then
            export DEVENVTAG=sandbox-$CONTRAIL_CONTAINER_TAG$TAG_SUFFIX
            export BUILD_DEV_ENV=1
            if docker images -a | grep $TF_DEVENV_CONTAINER_NAME ; then
              IMAGES_TO_DELETE="$(docker image inspect "$TF_DEVENV_CONTAINER_NAME" --format {{.RepoTags}} | tr -d '[]')"
              if [[ -n "$IMAGES_TO_DELETE" ]]; then
                docker rmi $IMAGES_TO_DELETE
              fi
            fi
          fi

          # main run
          ./src/progmaticlab/tf-jenkins/jobs/fetch/run.sh |& tee ${WORKSPACE}/output.log || res=1
          # collect logs
          ssh -i $LOGS_HOST_SSH_KEY $SSH_OPTIONS $LOGS_HOST_USERNAME@$LOGS_HOST "mkdir -p $FULL_LOGS_PATH"
          rsync -a -e "ssh -i ${LOGS_HOST_SSH_KEY} ${SSH_OPTIONS}" ${WORKSPACE}/output.log ${LOGS_HOST_USERNAME}@${LOGS_HOST}:${FULL_LOGS_PATH}
          ./src/progmaticlab/tf-jenkins/jobs/fetch/collect_logs.sh
          exit $res
    publishers:
        - postbuildscript:
            builders:
              - role: SLAVE
                build-on:
                    - SUCCESS
                    - FAILURE
                    - ABORTED
                    - NOT_BUILT
                    - UNSTABLE
                build-steps:
                    - shell: |
                        set +e
                        set -o pipefail
                        source "$WORKSPACE/global.env"
                        source "${WORKSPACE}/deps.${JOB_NAME}.${JOB_RND}.env" || /bin/true
                        # do it as a latest source to override all exports
                        source "${WORKSPACE}/vars.${JOB_NAME}.${JOB_RND}.env" || /bin/true

                        # definitions ONLY for this job
                        export TF_DEVENV_CONTAINER_NAME="tf-developer-sandbox-${BUILD_ID}"
                        # special case for fetch-sources - if we have changes in tf-dev-env then we should rebuild it
                        if grep -q "tungstenfabric/tf-dev-env" ./patchsets-info.json ; then
                          export DEVENVTAG=sandbox-$CONTRAIL_CONTAINER_TAG$TAG_SUFFIX
                        fi

                        # have to cleanup here for case of 'cancel job'
                        if [[ -e $WORKSPACE/stackrc.$JOB_NAME.env ]] ; then
                          # cleanup only if worker was created
                          source "$WORKSPACE/stackrc.$JOB_NAME.env"
                          echo "INFO: cleanup workers"
                          ./src/progmaticlab/tf-jenkins/infra/${SLAVE}/remove_workers.sh || true
                          rm -f $WORKSPACE/stackrc.$JOB_NAME.env
                        else
                          echo "INFO: there is no env file. skipping workers cleanup"
                        fi

                        # docker cleanup
                        if docker ps -a --format '{{.Names}}' | grep "$TF_DEVENV_CONTAINER_NAME" ; then 
                          if [[ "$(docker container inspect $TF_DEVENV_CONTAINER_NAME --format='{{ .State.Status }}')" == 'running' ]] ; then
                            docker stop $TF_DEVENV_CONTAINER_NAME
                          fi
                          docker rm $TF_DEVENV_CONTAINER_NAME
                        fi
                        for name in "tf-developer-sandbox-$CONTRAIL_CONTAINER_TAG$TAG_SUFFIX" $TF_DEVENV_CONTAINER_NAME ; do
                          for image in $(docker images -a | grep "$name" | awk '{print $3}') ; do
                            IMAGES_TO_DELETE="$(docker image inspect "$image" --format {{.RepoTags}} | tr -d '[]')"
                            if [[ -n "$IMAGES_TO_DELETE" ]]; then
                              docker rmi $IMAGES_TO_DELETE
                            fi
                          done
                        done
        - archive:
            artifacts: '*.env'
